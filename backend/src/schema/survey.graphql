# Survey Type
type Survey implements Node {
  id: ID!
  title: String!
  description: String
  projectId: ID!
  status: SurveyStatus!
  key: String!
  form: SurveyForm
  isDeleted: Boolean!
  createdAt: Date!
  updatedAt: Date
}

type SurveyForm {
  id: ID!
  sections: [SurveySection!]!
  context: String
  welcomeMessage: String
  updatedAt: Date
}

type SurveySection {
  id: ID!
  title: String!
  description: String
  fields: [JSON!]!
  order: Int!
}

"""
Question Types
"""
type TextQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  type: SurveyFieldTypeEnum!
  instructions: String
  order: Int!
}

type MultipleChoiceQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  choices: [Choice!]!
  allowMultiple: Boolean
  randomize: Boolean
  type: SurveyFieldTypeEnum!
  order: Int!
}

type Choice {
  id: ID!
  text: String!
}

type RatingQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  labels: [String!]!
  startAtOne: Boolean
  steps: Int
  type: SurveyFieldTypeEnum!
  order: Int!
}

type StatementField {
  id: ID!
  text: String!
  buttonText: String
  textSize: TextSize
  type: SurveyFieldTypeEnum!
  order: Int!
}

type RankingQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  choices: [Choice!]!
  randomize: Boolean
  type: SurveyFieldTypeEnum!
  order: Int!
}

type MatrixQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  rows: [String!]!
  columns: [String!]!
  allowMultiplePerRow: Boolean!
  type: SurveyFieldTypeEnum!
  order: Int!
}

type NumberQuestion {
  id: ID!
  text: String!
  description: String
  required: Boolean!
  min: Float
  max: Float
  unit: String
  type: SurveyFieldTypeEnum!
  order: Int!
}

type Checkpoint {
  id: ID!
  condition: String!
  target: CheckpointTarget!
  type: SurveyFieldTypeEnum!
  order: Int!
}

type CheckpointTarget {
  type: TargetType!
  value: String
}

"""
Enums
"""
enum TextSize {
  SMALL
  MEDIUM
  LARGE
}

enum TargetType {
  SKIP_TO_SECTION
  SKIP_TO_QUESTION
  END
}

enum SurveyStatus {
  DRAFT
  PUBLISHED
}

union SurveyQuestion =
  | TextQuestion
  | MultipleChoiceQuestion
  | RatingQuestion
  | StatementField
  | RankingQuestion
  | MatrixQuestion
  | NumberQuestion

enum SurveyFieldTypeEnum {
  TextQuestion
  MultipleChoiceQuestion
  RatingQuestion
  StatementField
  RankingQuestion
  MatrixQuestion
  NumberQuestion
  Checkpoint
}

"""
Input Types
"""
input SurveyCreateInput {
  projectId: ID!
  title: String!
  description: String
}

input SurveySectionBulkCreateInput {
  surveyId: ID!
  sections: [SurveySectionInput!]!
}

input SurveySectionInput {
  id: ID
  title: String!
  description: String
  fields: [JSON!]!
}

input SurveyUpdateInput {
  id: ID!
  title: String
  description: String
  welcomeMessage: String
  context: String
}

input SurveyFormUpdateInput {
  surveyId: ID!
  sections: [SurveySectionInput!]!
  context: String
}

input SurveyPublishInput {
  id: ID!
}

"""
Survey Operation Outputs
"""
type SurveyResponse {
  data: Survey
  error: Error
}

type SurveysResponse {
  data: SurveyConnection!
  error: Error
}

type SurveyConnection implements Connection {
  edges: [SurveyEdge!]!
  pageInfo: PageInfo!
}

type SurveyEdge implements Edge {
  cursor: String!
  node: Survey!
}

"""
Form Operation Responses
"""
type SurveySectionResponse {
  data: SurveySection
  error: Error
}

type SurveyFieldResponse {
  data: JSON
  error: Error
}

"""
Form Operation Types
"""
enum SurveyFormOperationType {
  ADD_SECTION
  UPDATE_SECTION
  DELETE_SECTION
  MOVE_SECTION
  ADD_FIELD
  UPDATE_FIELD
  DELETE_FIELD
  MOVE_FIELD_IN_SECTION
}

"""
Generic Form Operation Input
"""
input SurveyFormOperationInput {
  formId: ID!
  operation: SurveyFormOperationType!
  # Generic data field that will be validated based on operation type
  data: JSON!
}

"""
Generic Form Operation Response
"""
type SurveyFormOperationResponse {
  data: Survey!
  error: Error
}

"""
Survey Session Types
"""
type SurveySession implements Node {
  id: ID!
  surveyId: ID!
  respondentData: RespondentData!
  state: JSON!
  startedAt: Date!
  completedAt: Date
  lastActivityAt: Date!
  createdAt: Date!
  updatedAt: Date!
}

type RespondentData {
  email: String
  name: String
  role: String
  ip: String
}

type SurveySessionResponse {
  data: SurveySession
  error: Error
}

type StartSurveySessionResponse {
  nextQuestion: JSON
  metadata: JSON
  error: Error
}

enum SessionStatus {
  STARTED
  IN_PROGRESS
  COMPLETED
  ENDED
}

input StartSurveySessionInput {
  surveyKey: String!
  sessionId: String
}

input InviteRespondentInput {
  surveyId: ID!
  email: String!
  name: String
  role: String
}

input SubmitSurveySessionAnswerInput {
  sessionId: ID!
  questionId: ID!
  answer: JSON!
}

type SubmitSurveySessionAnswerResponse {
  nextQuestion: JSON
  metadata: JSON
  error: Error
}

extend type Mutation {
  startSurveySession(
    input: StartSurveySessionInput!
  ): StartSurveySessionResponse!
  submitSurveySessionAnswer(
    input: SubmitSurveySessionAnswerInput!
  ): SubmitSurveySessionAnswerResponse!
  updateSurveySectionsBulk(
    input: SurveySectionBulkCreateInput!
  ): SurveyResponse!
  publishSurvey(input: SurveyPublishInput!): SurveyResponse!
  inviteRespondent(input: InviteRespondentInput!): SurveySessionResponse!
}

extend type Query {
  listSurveyRespondents(surveyId: ID!): [SurveySession!]!
}

type SurveySessionConnection implements Connection {
  edges: [SurveySessionEdge!]!
  pageInfo: PageInfo!
}

type SurveySessionEdge implements Edge {
  cursor: String!
  node: SurveySession!
}
