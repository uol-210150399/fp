
type UserQuery {
  get(input: UserGetInput!): UserGetOutput!
  list(input: UserListInput!): UserListOutput!
  me: UserGetOutput!
}

type UserMutation {
  create(input: UserCreateInput!): UserCreateOutput!
  update(input: UserUpdateInput!): UserUpdateOutput!
  delete(input: UserDeleteInput!): UserDeleteOutput!
}

# User Get
## Input
input UserGetInput {
  id: String!
}

## Output
union UserGetOutput = UserGetSuccess | UserGetFailure

type UserGetSuccess {
  user: User!
}

type User implements Node {
  id: String!
  email: String!
  name: String!
  isDeleted: Boolean!
  createdAt: Date!
  updatedAt: Date
}

type UserGetFailure {
  error: UserGetError!
}

type UserGetError {
  message: String!
}

# User List
## Input
input UserListInput {
  pagination: PaginationInput!
  filter: UserListFilterInput
}

input UserListFilterInput {
    teamId: String!
}

## Output
union UserListOutput = UserListSuccess | UserListFailure

type UserConnection implements Connection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge implements Edge {
  cursor: String!
  node: User!
}

type UserListSuccess {
  users: UserConnection!
}

type UserListFailure {
  error: UserListError!
}

type UserListError {
  message: String!
}

# User Create
## Input
input UserCreateInput {
  name: String!
  email: String!
  password: String!
}

## Output
union UserCreateOutput = UserCreateSuccess | UserCreateFailure

type UserCreateSuccess {
  user: User!
}

type UserCreateFailure {
  error: UserCreateError!
}

type UserCreateError {
  message: String!
}

# User Update
## Input
input UserUpdateInput {
  id: String!
  name: String
  email: String
  password: String
}

## Output
union UserUpdateOutput = UserUpdateSuccess | UserUpdateFailure

type UserUpdateSuccess {
  user: User!
}

type UserUpdateFailure {
  error: UserUpdateError!
}

type UserUpdateError {
  message: String!
}

# User Delete
## Input
input UserDeleteInput {
  id: String!
}

## Output
union UserDeleteOutput = UserDeleteSuccess | UserDeleteFailure

type UserDeleteSuccess {
  user: User!
}

type UserDeleteFailure {
  error: UserDeleteError!
}

type UserDeleteError {
  message: String!
}
